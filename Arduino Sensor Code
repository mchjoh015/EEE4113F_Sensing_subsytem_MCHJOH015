#include <Servo.h> // Include the Servo library

// Define Ultrasonic Sensor pins
const int TRIG_PIN = 10;
const int ECHO_PIN = 11;
const int SERVO_PIN = 12;
const int RED_LED_PIN = 9; // Define Red LED pin

// Variables for distance measurement
long pulseDuration;
int measuredDistance;
int currentAngle;
int objectStartAngle = -1;
int objectEndAngle = -1;
int minDistance = 100; // Track minimum distance to estimate height
Servo servoMotor; // Servo object for controlling the motor
const float ANGLE_TO_CM = 0.5; // Conversion factor for width estimation

void setup() {
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    pinMode(RED_LED_PIN, OUTPUT); // Set LED pin as output
    digitalWrite(RED_LED_PIN, LOW); // Ensure LED is off initially
    Serial.begin(9600);
    servoMotor.attach(SERVO_PIN);
}

void loop() {
    scanArea();
}

// Function to rotate servo and measure distance
void scanArea() {
    minDistance = 100; // Reset min distance before scanning
    objectStartAngle = -1; // Reset object angles before scanning
    objectEndAngle = -1; // Reset object angles before scanning
    
    for (int angle = 0; angle <= 180; angle += 10) { // Increase step size for faster movement
        moveServoAndMeasure(angle);
    }
    
    for (int angle = 180; angle >= 0; angle -= 10) { // Increase step size for faster movement
        moveServoAndMeasure(angle);
    }
    
}

// Function to move the servo and measure distance
void moveServoAndMeasure(int angle) {
    servoMotor.write(angle);
    currentAngle = angle;
    delay(500); // Reduced delay for quicker servo movement
    measuredDistance = getDistance();
    
    // Print the current angle and distance for debugging
    Serial.print(getAngle());
    Serial.print(",");
    Serial.print(measuredDistance);
    Serial.println(".");
}

// Function to measure distance using the ultrasonic sensor
int getDistance() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    
    // Read the pulse duration, with a timeout for safety
    pulseDuration = pulseIn(ECHO_PIN, HIGH, 20000); // 20ms timeout
    return pulseDuration * 0.034 / 2; // Convert time to distance (cm)
}

// Function to get the current servo angle
int getAngle() {
    return currentAngle;
}
