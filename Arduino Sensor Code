#include <WiFi.h>
#include <WiFiUdp.h>
#include <ESP32Servo.h>  // Servo library

// WiFi credentials
const char* ssid = "Voutsas_Wifi";
const char* password = "greenapple";

// IP address of the PC running Processing (change this!)
const char* udpAddress = "192.168.0.144";  // <- Replace with your computer's IP
const int udpPort = 4210;

// Pin definitions
const int SERVO_PIN = 12;  // Servo signal pin
const int TRIG_PIN = 14;   // HC-SR04 Trig pin
const int ECHO_PIN = 27;   // HC-SR04 Echo pin

Servo myServo;
WiFiUDP udp;

void setup() {
  Serial.begin(115200);
    delay(1000);

    WiFi.mode(WIFI_STA); //Optional
    WiFi.begin(ssid, password);
    Serial.println("\nConnecting");

    while(WiFi.status() != WL_CONNECTED){
        Serial.print(".");
        delay(1000);
    }

    Serial.println("\nConnected to the WiFi network");
    Serial.print("Local ESP32 IP: ");
    Serial.println(WiFi.localIP());

  // Set up pins
  myServo.attach(SERVO_PIN);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}

void loop() {
  // Sweep from 0 to 180 degrees
  for (int angle = 0; angle <= 180; angle++) {
    myServo.write(angle);
    delay(100);

    long distance = measureDistance();
    sendUDP(angle, distance);
  }

  // Sweep back from 180 to 0 degrees
  for (int angle = 180; angle >= 0; angle--) {
    myServo.write(angle);
    delay(100);

    long distance = measureDistance();
    sendUDP(angle, distance);
  }
}

// Function to measure distance using HC-SR04
long measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 25000); // timeout at 25 ms
  long distanceCm = duration * 0.0343 / 2;

  if (distanceCm == 0 || distanceCm > 400) {
    distanceCm = 400;
  }

  return distanceCm;
}

// Function to send angle and distance via UDP
void sendUDP(int angle, long distance) {
  String message = String(angle) + "," + String(distance) + ".";
  udp.beginPacket(udpAddress, udpPort);
  udp.print(message);
  udp.endPacket();

  Serial.println(message);  // For debugging
}
  
  return distanceCm;
}

